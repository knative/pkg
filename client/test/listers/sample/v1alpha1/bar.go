/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/pkg/apis/test/sample/v1alpha1"
)

// BarLister helps list Bars.
type BarLister interface {
	// List lists all Bars in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Bar, err error)
	// Bars returns an object that can list and get Bars.
	Bars(namespace string) BarNamespaceLister
	BarListerExpansion
}

// barLister implements the BarLister interface.
type barLister struct {
	indexer cache.Indexer
}

// NewBarLister returns a new BarLister.
func NewBarLister(indexer cache.Indexer) BarLister {
	return &barLister{indexer: indexer}
}

// List lists all Bars in the indexer.
func (s *barLister) List(selector labels.Selector) (ret []*v1alpha1.Bar, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Bar))
	})
	return ret, err
}

// Bars returns an object that can list and get Bars.
func (s *barLister) Bars(namespace string) BarNamespaceLister {
	return barNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BarNamespaceLister helps list and get Bars.
type BarNamespaceLister interface {
	// List lists all Bars in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Bar, err error)
	// Get retrieves the Bar from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Bar, error)
	BarNamespaceListerExpansion
}

// barNamespaceLister implements the BarNamespaceLister
// interface.
type barNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Bars in the indexer for a given namespace.
func (s barNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Bar, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Bar))
	})
	return ret, err
}

// Get retrieves the Bar from the indexer for a given namespace and name.
func (s barNamespaceLister) Get(name string) (*v1alpha1.Bar, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bar"), name)
	}
	return obj.(*v1alpha1.Bar), nil
}
